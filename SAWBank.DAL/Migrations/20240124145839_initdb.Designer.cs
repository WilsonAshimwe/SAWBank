// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SAWBank.DAL;

#nullable disable

namespace SAWBank.DAL.Migrations
{
    [DbContext(typeof(SAWBankContext))]
    [Migration("20240124145839_initdb")]
    partial class initdb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AccountCustomer", b =>
                {
                    b.Property<int>("AccountsId")
                        .HasColumnType("int");

                    b.Property<int>("CustomersId")
                        .HasColumnType("int");

                    b.HasKey("AccountsId", "CustomersId");

                    b.HasIndex("CustomersId");

                    b.ToTable("AccountCustomer");
                });

            modelBuilder.Entity("SAWBank.DOMAIN.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<int>("CurrentBalance")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuspended")
                        .HasColumnType("bit");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountNumber")
                        .IsUnique();

                    b.HasIndex("TypeId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("SAWBank.DOMAIN.Entities.AccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AccountTypes");
                });

            modelBuilder.Entity("SAWBank.DOMAIN.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(75)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("char(4)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("SAWBank.DOMAIN.Entities.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<string>("NumberCard")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<byte[]>("Pin")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("NumberCard")
                        .IsUnique();

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("SAWBank.DOMAIN.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(75)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("SAWBank.DOMAIN.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("DepositAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<int>("WithdrawAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepositAccountId");

                    b.HasIndex("WithdrawAccountId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("SAWBank.DOMAIN.Entities.Company", b =>
                {
                    b.HasBaseType("SAWBank.DOMAIN.Entities.Customer");

                    b.Property<string>("BusinessNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.HasIndex("BusinessNumber")
                        .IsUnique()
                        .HasFilter("[BusinessNumber] IS NOT NULL");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("SAWBank.DOMAIN.Entities.Person", b =>
                {
                    b.HasBaseType("SAWBank.DOMAIN.Entities.Customer");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(75)");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("AccountCustomer", b =>
                {
                    b.HasOne("SAWBank.DOMAIN.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAWBank.DOMAIN.Entities.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SAWBank.DOMAIN.Entities.Account", b =>
                {
                    b.HasOne("SAWBank.DOMAIN.Entities.AccountType", "Type")
                        .WithMany("Accounts")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("SAWBank.DOMAIN.Entities.Card", b =>
                {
                    b.HasOne("SAWBank.DOMAIN.Entities.Account", "Account")
                        .WithMany("Cards")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SAWBank.DOMAIN.Entities.Customer", b =>
                {
                    b.HasOne("SAWBank.DOMAIN.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("SAWBank.DOMAIN.Entities.Transaction", b =>
                {
                    b.HasOne("SAWBank.DOMAIN.Entities.Account", "DepositAccount")
                        .WithMany("DepositAccountTransactions")
                        .HasForeignKey("DepositAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SAWBank.DOMAIN.Entities.Account", "WithdrawAccount")
                        .WithMany("WithdrawAccountTransactions")
                        .HasForeignKey("WithdrawAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DepositAccount");

                    b.Navigation("WithdrawAccount");
                });

            modelBuilder.Entity("SAWBank.DOMAIN.Entities.Company", b =>
                {
                    b.HasOne("SAWBank.DOMAIN.Entities.Customer", null)
                        .WithOne()
                        .HasForeignKey("SAWBank.DOMAIN.Entities.Company", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SAWBank.DOMAIN.Entities.Person", b =>
                {
                    b.HasOne("SAWBank.DOMAIN.Entities.Customer", null)
                        .WithOne()
                        .HasForeignKey("SAWBank.DOMAIN.Entities.Person", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SAWBank.DOMAIN.Entities.Account", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("DepositAccountTransactions");

                    b.Navigation("WithdrawAccountTransactions");
                });

            modelBuilder.Entity("SAWBank.DOMAIN.Entities.AccountType", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
