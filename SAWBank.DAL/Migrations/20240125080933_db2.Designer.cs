// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SAWBank.DAL;

#nullable disable

namespace SAWBank.DAL.Migrations
{
    [DbContext(typeof(SAWBankContext))]
    [Migration("20240125080933_db2")]
    partial class db2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AccountCustomer", b =>
                {
                    b.Property<int>("AccountsId")
                        .HasColumnType("int");

                    b.Property<int>("CustomersId")
                        .HasColumnType("int");

                    b.HasKey("AccountsId", "CustomersId");

                    b.HasIndex("CustomersId");

                    b.ToTable("AccountCustomer");
                });

            modelBuilder.Entity("SAWBank.DOMAIN.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<int>("CurrentBalance")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuspended")
                        .HasColumnType("bit");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountNumber")
                        .IsUnique();

                    b.HasIndex("TypeId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountNumber = "BE-22-1111-333-4444",
                            CurrentBalance = 10000,
                            IsActive = true,
                            IsSuspended = false,
                            TypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            AccountNumber = "BE-22-1111-333-5555",
                            CurrentBalance = 500,
                            IsActive = true,
                            IsSuspended = false,
                            TypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            AccountNumber = "BE-22-1111-333-4888",
                            CurrentBalance = 400000,
                            IsActive = true,
                            IsSuspended = false,
                            TypeId = 1
                        },
                        new
                        {
                            Id = 4,
                            AccountNumber = "BE-22-1111-444-4444",
                            CurrentBalance = 0,
                            IsActive = true,
                            IsSuspended = false,
                            TypeId = 1
                        },
                        new
                        {
                            Id = 5,
                            AccountNumber = "BE-22-1111-383-4444",
                            CurrentBalance = 100000000,
                            IsActive = true,
                            IsSuspended = false,
                            TypeId = 1
                        },
                        new
                        {
                            Id = 6,
                            AccountNumber = "BE-24-1111-333-4444",
                            CurrentBalance = 200000000,
                            IsActive = true,
                            IsSuspended = false,
                            TypeId = 1
                        },
                        new
                        {
                            Id = 7,
                            AccountNumber = "BE-22-1177-333-4444",
                            CurrentBalance = 500,
                            IsActive = true,
                            IsSuspended = false,
                            TypeId = 1
                        });
                });

            modelBuilder.Entity("SAWBank.DOMAIN.Entities.AccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AccountTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            Type = 1
                        });
                });

            modelBuilder.Entity("SAWBank.DOMAIN.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(75)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("char(4)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Bruxelles",
                            Street = "Rue blablabla",
                            StreetNumber = "5",
                            ZipCode = "1000"
                        },
                        new
                        {
                            Id = 2,
                            City = "Londre",
                            Street = "Rue nononono",
                            StreetNumber = "43B",
                            ZipCode = "8513"
                        },
                        new
                        {
                            Id = 3,
                            City = "Bruxelles",
                            Street = "Rue hihihihi",
                            StreetNumber = "777",
                            ZipCode = "3657"
                        },
                        new
                        {
                            Id = 4,
                            City = "Bruxelles",
                            Street = "Rue delhaize",
                            StreetNumber = "21",
                            ZipCode = "1000"
                        },
                        new
                        {
                            Id = 5,
                            City = "Bruxelles",
                            Street = "Rue repository",
                            StreetNumber = "156",
                            ZipCode = "1000"
                        },
                        new
                        {
                            Id = 6,
                            City = "Bruxelles",
                            Street = "Rue formation",
                            StreetNumber = "98a",
                            ZipCode = "1000"
                        });
                });

            modelBuilder.Entity("SAWBank.DOMAIN.Entities.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<string>("NumberCard")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<byte[]>("Pin")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("NumberCard")
                        .IsUnique();

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 1,
                            IsBlocked = false,
                            NumberCard = "0000-1234-5678-9012",
                            Pin = new byte[] { 215, 137, 24, 209, 21, 50, 4, 74, 80, 37, 155, 22, 60, 194, 121, 21, 102, 122, 47, 131, 242, 98, 102, 27, 5, 154, 90, 26, 200, 214, 180, 88, 251, 216, 2, 44, 3, 180, 19, 94, 27, 183, 197, 48, 43, 218, 157, 35, 98, 241, 156, 47, 201, 193, 146, 241, 183, 54, 207, 108, 84, 73, 40, 73 }
                        },
                        new
                        {
                            Id = 2,
                            AccountId = 3,
                            IsBlocked = false,
                            NumberCard = "1111-1234-5678-9012",
                            Pin = new byte[] { 144, 51, 53, 0, 119, 97, 239, 136, 81, 186, 226, 140, 69, 191, 220, 57, 196, 202, 144, 250, 65, 148, 33, 238, 159, 15, 55, 151, 181, 206, 124, 89, 134, 216, 10, 143, 37, 49, 191, 93, 199, 166, 237, 174, 114, 39, 0, 53, 212, 80, 237, 8, 143, 15, 208, 87, 254, 8, 95, 166, 183, 201, 177, 162 }
                        },
                        new
                        {
                            Id = 3,
                            AccountId = 4,
                            IsBlocked = false,
                            NumberCard = "2222-1234-5678-9012",
                            Pin = new byte[] { 100, 110, 180, 94, 210, 96, 87, 11, 249, 247, 72, 68, 117, 157, 253, 70, 200, 80, 239, 193, 146, 4, 64, 95, 250, 175, 253, 2, 89, 201, 2, 21, 247, 54, 185, 142, 50, 134, 26, 157, 231, 114, 70, 17, 244, 95, 130, 200, 104, 180, 55, 140, 53, 123, 50, 110, 214, 53, 98, 149, 24, 109, 184, 64 }
                        },
                        new
                        {
                            Id = 4,
                            AccountId = 5,
                            IsBlocked = false,
                            NumberCard = "3333-1234-5678-9012",
                            Pin = new byte[] { 250, 85, 102, 64, 30, 225, 232, 58, 85, 21, 38, 42, 251, 45, 158, 109, 55, 180, 16, 41, 16, 93, 84, 136, 169, 43, 172, 202, 34, 171, 6, 90, 14, 156, 180, 178, 150, 31, 109, 180, 117, 153, 175, 161, 43, 5, 83, 222, 8, 23, 149, 131, 49, 66, 167, 104, 14, 254, 183, 221, 100, 138, 95, 12 }
                        },
                        new
                        {
                            Id = 5,
                            AccountId = 6,
                            IsBlocked = false,
                            NumberCard = "4444-1234-5678-9012",
                            Pin = new byte[] { 214, 62, 200, 103, 175, 171, 114, 79, 67, 173, 225, 223, 130, 208, 132, 26, 220, 137, 170, 175, 84, 184, 147, 125, 63, 130, 100, 6, 193, 226, 50, 36, 227, 241, 252, 4, 28, 48, 118, 124, 64, 16, 178, 158, 84, 183, 49, 77, 116, 0, 134, 245, 13, 94, 108, 15, 144, 68, 90, 45, 41, 16, 221, 208 }
                        },
                        new
                        {
                            Id = 6,
                            AccountId = 7,
                            IsBlocked = false,
                            NumberCard = "5555-1234-5678-9012",
                            Pin = new byte[] { 102, 140, 224, 214, 109, 152, 170, 81, 77, 141, 91, 85, 247, 107, 228, 245, 92, 81, 196, 94, 166, 216, 9, 41, 239, 200, 103, 183, 142, 244, 56, 187, 164, 196, 130, 82, 146, 127, 31, 5, 42, 200, 240, 46, 161, 123, 209, 160, 70, 251, 71, 8, 144, 156, 170, 238, 66, 199, 159, 79, 135, 40, 75, 185 }
                        });
                });

            modelBuilder.Entity("SAWBank.DOMAIN.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(75)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("SAWBank.DOMAIN.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("DepositAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<int>("WithdrawAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepositAccountId");

                    b.HasIndex("WithdrawAccountId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("SAWBank.DOMAIN.Entities.Company", b =>
                {
                    b.HasBaseType("SAWBank.DOMAIN.Entities.Customer");

                    b.Property<string>("BusinessNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.HasIndex("BusinessNumber")
                        .IsUnique()
                        .HasFilter("[BusinessNumber] IS NOT NULL");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            AddressId = 4,
                            Email = "delheize@supermarket.com",
                            IsActive = true,
                            Password = new byte[] { 169, 214, 2, 40, 69, 37, 241, 232, 9, 131, 182, 99, 72, 238, 75, 86, 85, 168, 70, 55, 38, 134, 138, 50, 214, 30, 254, 79, 165, 213, 77, 53, 188, 145, 149, 65, 36, 225, 53, 78, 195, 41, 241, 179, 177, 136, 217, 207, 53, 23, 232, 4, 234, 230, 12, 4, 150, 171, 29, 134, 145, 67, 212, 20 },
                            PhoneNumber = "+320489234321",
                            Username = "Delheize",
                            BusinessNumber = "BE 0123.456.789",
                            Name = "Delheize"
                        },
                        new
                        {
                            Id = 5,
                            AddressId = 5,
                            Email = "github@info.com",
                            IsActive = true,
                            Password = new byte[] { 193, 198, 49, 69, 230, 250, 211, 107, 15, 215, 236, 43, 69, 34, 149, 196, 167, 10, 230, 19, 7, 24, 223, 91, 23, 209, 142, 125, 77, 159, 171, 83, 160, 39, 31, 140, 203, 215, 41, 62, 20, 175, 168, 175, 145, 157, 238, 202, 168, 241, 243, 30, 212, 15, 229, 216, 206, 77, 147, 78, 76, 197, 246, 46 },
                            PhoneNumber = "+320489234333",
                            Username = "Github",
                            BusinessNumber = "BE 3456.789.012",
                            Name = "Github"
                        },
                        new
                        {
                            Id = 6,
                            AddressId = 6,
                            Email = "digitalcity@info.com",
                            IsActive = true,
                            Password = new byte[] { 192, 46, 211, 178, 84, 234, 9, 23, 241, 64, 250, 39, 173, 237, 202, 179, 141, 10, 223, 92, 215, 168, 209, 167, 100, 198, 57, 19, 96, 30, 173, 32, 74, 55, 46, 112, 182, 115, 148, 252, 132, 216, 74, 187, 57, 199, 141, 15, 95, 117, 87, 172, 110, 14, 133, 53, 202, 39, 32, 80, 95, 39, 22, 230 },
                            PhoneNumber = "+320489232222",
                            Username = "DC",
                            BusinessNumber = "BE 3210.987.654",
                            Name = "Digital City"
                        });
                });

            modelBuilder.Entity("SAWBank.DOMAIN.Entities.Person", b =>
                {
                    b.HasBaseType("SAWBank.DOMAIN.Entities.Customer");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(75)");

                    b.ToTable("Persons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            Email = "stef@test.com",
                            IsActive = true,
                            Password = new byte[] { 72, 184, 29, 54, 101, 234, 221, 63, 181, 23, 191, 84, 109, 221, 56, 115, 5, 6, 141, 194, 143, 245, 166, 161, 20, 14, 248, 31, 247, 113, 132, 3, 140, 255, 202, 108, 29, 111, 228, 63, 99, 103, 33, 130, 144, 21, 105, 138, 7, 247, 206, 163, 194, 184, 131, 109, 80, 15, 109, 101, 20, 25, 230, 105 },
                            PhoneNumber = "+320413234567",
                            Username = "stef",
                            BirthDate = new DateTime(1900, 2, 16, 17, 13, 4, 374, DateTimeKind.Unspecified),
                            FirstName = "Stefania",
                            LastName = "Méchante"
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            Email = "wil@test.com",
                            IsActive = true,
                            Password = new byte[] { 55, 153, 21, 146, 139, 174, 49, 219, 41, 97, 132, 28, 255, 58, 33, 248, 142, 75, 152, 221, 22, 26, 94, 200, 108, 13, 99, 74, 121, 189, 211, 200, 60, 159, 13, 122, 159, 66, 251, 145, 29, 127, 12, 102, 167, 58, 38, 153, 165, 25, 143, 238, 37, 67, 179, 4, 67, 170, 230, 141, 22, 16, 226, 7 },
                            PhoneNumber = "+320423234789",
                            Username = "wil",
                            BirthDate = new DateTime(1930, 5, 21, 17, 13, 4, 374, DateTimeKind.Unspecified),
                            FirstName = "Wilson",
                            LastName = "Python Expert"
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 3,
                            Email = "ad@test.com",
                            IsActive = true,
                            Password = new byte[] { 21, 216, 127, 210, 33, 85, 249, 34, 145, 223, 67, 132, 67, 249, 232, 153, 89, 106, 126, 13, 242, 199, 211, 79, 254, 5, 228, 106, 188, 227, 181, 143, 202, 210, 93, 192, 202, 166, 215, 138, 55, 47, 192, 174, 75, 94, 222, 129, 176, 105, 51, 67, 128, 140, 85, 205, 135, 226, 238, 212, 105, 161, 235, 91 },
                            PhoneNumber = "+320473568123",
                            Username = "ad",
                            BirthDate = new DateTime(1996, 7, 17, 17, 13, 4, 374, DateTimeKind.Unspecified),
                            FirstName = "Adam",
                            LastName = "Number One"
                        });
                });

            modelBuilder.Entity("AccountCustomer", b =>
                {
                    b.HasOne("SAWBank.DOMAIN.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SAWBank.DOMAIN.Entities.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SAWBank.DOMAIN.Entities.Account", b =>
                {
                    b.HasOne("SAWBank.DOMAIN.Entities.AccountType", "Type")
                        .WithMany("Accounts")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("SAWBank.DOMAIN.Entities.Card", b =>
                {
                    b.HasOne("SAWBank.DOMAIN.Entities.Account", "Account")
                        .WithMany("Cards")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SAWBank.DOMAIN.Entities.Customer", b =>
                {
                    b.HasOne("SAWBank.DOMAIN.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("SAWBank.DOMAIN.Entities.Transaction", b =>
                {
                    b.HasOne("SAWBank.DOMAIN.Entities.Account", "DepositAccount")
                        .WithMany("DepositAccountTransactions")
                        .HasForeignKey("DepositAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SAWBank.DOMAIN.Entities.Account", "WithdrawAccount")
                        .WithMany("WithdrawAccountTransactions")
                        .HasForeignKey("WithdrawAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DepositAccount");

                    b.Navigation("WithdrawAccount");
                });

            modelBuilder.Entity("SAWBank.DOMAIN.Entities.Company", b =>
                {
                    b.HasOne("SAWBank.DOMAIN.Entities.Customer", null)
                        .WithOne()
                        .HasForeignKey("SAWBank.DOMAIN.Entities.Company", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SAWBank.DOMAIN.Entities.Person", b =>
                {
                    b.HasOne("SAWBank.DOMAIN.Entities.Customer", null)
                        .WithOne()
                        .HasForeignKey("SAWBank.DOMAIN.Entities.Person", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SAWBank.DOMAIN.Entities.Account", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("DepositAccountTransactions");

                    b.Navigation("WithdrawAccountTransactions");
                });

            modelBuilder.Entity("SAWBank.DOMAIN.Entities.AccountType", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
